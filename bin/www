#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('scrum:server');
var http = require('http');
//var SocketSingleton = require('../utils/socket-singleton');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server);
//console.log(io);

var users = [];

io.on('connect', socket => {
  console.log("=======> user connected");

  socket.on('disconnect', () => {
    console.log('user disconnected');
  });

  socket.on('setUsername', function (data) {
    console.log("user: " + data);
    if (users.indexOf(data) == -1) {
      console.log('new user added ' + data);
      users.push(data);
      socket.emit('userSet', { username: data });
    } else {
      socket.emit('userExists', data + ' username is taken! Try some other username.');
    }
  });

  socket.on('newMsg', function (data) {
    console.log("newMsg: " + JSON.stringify(data));
    socket.emit('newMsg', data);
  });


  // either with send()
  socket.send('Hello!');

  // or with emit() and custom event names
  socket.emit('greetings', 'Hey!', { 'ms': 'jane' }, Buffer.from([4, 3, 3, 1]));

  // handle the event sent with socket.send()
  socket.on('message', (data) => {
    console.log(data);
  });

  socket.on('disconnect', () => {
    console.log('=======>  user disconnected');
  });

  // handle the event sent with socket.emit()
  socket.on('salutations', (elem1, elem2, elem3) => {
    console.log(elem1, elem2, elem3);
  });


});

// SocketSingleton.configure(server); 

// SocketSingleton.io.on('connection', (socket) => {
//   console.log('a user connected');
//   socket.on('disconnect', () => {
//     console.log('user disconnected');
//   });

//   socket.on('chat message', (msg) => {
//     //io.emit('chat message', msg);
//     let recipientSocketIds = userSocketIdMap.get(recipientUserName);
//     for (let socketId of recipientSocketIds) {
//       io.to(socketID).emit('chat message', messageContent);
//     }
//     console.log('message: ' + msg);
//   });
// });

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
server.listen(port, () => {
  console.log(`App listening at http://localhost:${port}`)
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
